import argparse
import pandas as pd 
import numpy as np 
import sys
import os
from pathlib import Path
from datetime import datetime
from chipparser import parser_ca as psca 
from matrixparser import parser_matrix as psmx 
from epiatlasparser import filter_epiatlas as fep


def merge_dicts(dict1, dict2):
    """Receives two dictionaries.
    Returns a merged dictionary."""

    return {**dict1, **dict2}


def main():

    #creating master dict from compiled_histones file (C-A pred samples)
    dict_ca, dict_ca_count, dict_ca_pred = psca.create_dict_ca(args.df) #dict pred has all samples (35311)

    print(f'Your dict_ca and dict_ca_pred contains {len(dict_ca)} and {len(dict_ca_pred)}, respectively.')
    print(f'Your dict_ca_count: {dict_ca_count}')


    #filtering dict to use with matrix
    dict_ca_filter = psca.generate_dict_filter(dict_ca) #done
    dict_ca_pred_filter = {k:v for k,v in dict_ca_pred.items() if k in dict_ca_filter.keys()} #26238 samples

    print(f'Your dict_ca_filter and dict_ca_pred_filter contains {len(dict_ca_filter)} and {len(dict_ca_pred_filter)}, respectively.')

    #=========================RUN THIS BLOCK IF YOU WANT TO SAVE YOUR C-A DICT COUNT========================
    #filter 100kb list C-A
    # psca.filter_100kb_list(dict_ca_filter) #run once
    # psca.write_dict_count(dict_ca_count)
    #=======================================================================================================
    
    
    #filter epiatlas: raw samples and hist+inp
    dict_epi, dict_epi_count, dict_epi_pred = fep.filter_raw_hist(args.epiatlas) #6450 (raw + ctl_raw)

    print(f'Your dict_epiatlas and dict_epi_pred contains {len(dict_epi)} and {len(dict_epi_pred)}, respectively.')
    print(f'Your dict_epi_count: {dict_epi_count}')

    #merging dicts
    dict_master = merge_dicts(dict_ca_filter,dict_epi) #31723 samples
    dict_master_pred = merge_dicts(dict_ca_pred_filter,dict_epi_pred) #40796 samples #31723

    print(f'Your dict_master (ca+epiatlas) and dict_master_pred (ca+epiatlas) to be used with your matrix contains {len(dict_master)} and {len(dict_master_pred)}, respectively.')

    #matrix -> output results
    df_filled = psmx.matrix_median_average(args.matrix, dict_master, dict_master_pred, dict_epi)
    
    #saving results
    date = datetime.now().strftime("%Y_%m_%d")
    name_to_out = 'avr_median_ca_epiatlas_'+date+'.tsv'
    out_name = os.path.join(args.output,name_to_out)
    df_filled.to_csv(out_name,sep='\t', index=False)

    print(f'Your output file was saved as:{out_name}')




if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="A script to filter a matrix and give the median and average of specific samples per assay (e.g K4me3, K4me1)."
    )


    parser.add_argument('-d', '--df', action="store",
                        type=Path,
                        help="the root path to the dataframe containing the C-A samples and their corresponding targets.",
                        required=True
    )

    parser.add_argument('-m', '--matrix', action="store",
                        type=Path,
                        help="matrix generated by epigeec correlate.",
                        required=True
    )

    parser.add_argument('-e', '--epiatlas', action="store",
                        type=Path,
                        help="epiatlas prediction tsv file.",
                        required=True
    )

    parser.add_argument('-o', '--output', action="store",
                        type=Path,
                        help="root path tosave the average and median output file for each sample/each target."

    )

    args = parser.parse_args()

    main()